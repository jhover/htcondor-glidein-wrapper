#!/bin/env bash
#
# Wrapper to run Condor glidein (master + startd)
# Configured via args 
#
# Author: John Hover <jhover@bnl.gov>
#
WRAPPER_VERSION=0.9.0
CONDOR_VERSION=8.0.6
ARCH=x86_64
PLATFORM=RedHat6
TARBALL_NAME=condor-${CONDOR_VERSION}-${ARCH}_${PLATFORM}-stripped.tar.gz
TARBALL_URL=http://dev.racf.bnl.gov/dist/condor/$CONDOR_VERSION/rhel6/$ARCH/$TARBALL_NAME
CONDOR_DIR=~/condor
CONFIG=~/condor/etc/condor_config
#DEFAULT_COLLECTOR=gridtest05.racf.bnl.gov
#DEFAULT_COLLECTOR_PORT=29618
COLLECTOR=gridtest05.racf.bnl.gov
PORT=29618
AUTH=password
POOLPASS=changeme
EXITTIME=300


usage()
{
cat << EOF
usage: $0 [options]

Run glidein against given collector:port and auth. 

OPTIONS:
 -h     
 -c      Collector name
 -p      Collector port
 -a      Auth [password|gsi]
 -w      Pool password (for password auth)
 -x      Glidein linger time seconds [300]
 -v      Verbose
EOF
}

get_args() {
	while getopts “hc:p:a:w:v” OPTION ; do
	     case $OPTION in
	        h)
	             usage
	             exit 1;;
	        c)
	            COLLECTOR=$OPTARG;;
	        p)
	            PORT=$OPTARG;;
	        a)
	            AUTH=$OPTARG;;
	        w)
	            POOLPASS=$OPTARG;;
	        x)
	            EXITTIME=$OPTARG;;  
	        v)
	            VERBOSE=1;;         
	        ?)
	             usage
	             exit 1;;
	     esac
	done
}

validate_args() {
	echo "COLLECTOR is $COLLECTOR"
	echo "PORT is $PORT"
	echo "AUTH is $AUTH"
	echo "POOLPASS is $POOLPASS"
}

print_header() {
	echo "condor_glidein version $WRAPPER_VERSION"
	HOST=`hostname -f`
	DATE=`date -u +"%Y-%m-%d %H:%M:%SUTC"`
	echo "running on $HOST $DATE" 
}

setup_dir() {
	cd 
	WD=`pwd`
	echo "working dir is $WD"
	echo "creating Condor dir $CONDOR_DIR"
	mkdir -p $CONDOR_DIR
	cd $CONDOR_DIR

}

handle_tarball() {
	echo "retrieving tarball from $TARBALL_URL"
	wget $TARBALL_URL > /dev/null 2>&1
	echo "unpacking tarball..."
	tar --verbose --extract --gzip --strip-components=1  --file=$TARBALL_NAME > /dev/null 2>&1

}

install_condor() {
	echo "running condor_install..."
	./condor_install --type=execute > /dev/null 2>&1
	export CONDOR_CONFIG=$CONDOR_DIR/etc/condor_config
    HN=`hostname -s`
    mkdir $CONDOR_DIR/local.$HN/config
	
}

configure_condor() {
 echo "adding COLLECTOR_HOST=$COLLECTOR:$PORT to config"
 HN=`hostname -s`
 LCONFIG=$CONDOR_DIR/local.$HN/condor_config.local
 echo COLLECTOR_HOST=$COLLECTOR:$PORT >> $LCONFIG


}

configure_auth() {
	echo "configuring condor auth..."
	HN=`hostname -s`
	LCONFIG=$CONDOR_DIR/local.$HN/condor_config.local
	
    echo "STARTD_NOCLAIM_SHUTDOWN = $EXITTIME" >> $LCONFIG	
	echo "START = TRUE" >> $LCONFIG
 	echo "SUSPEND = FALSE" >> $LCONFIG
 	echo "PREEMPT = FALSE" >> $LCONFIG
 	echo "KILL = FALSE" >> $LCONFIG
 	echo "RANK = 0" >> $LCONFIG
 	echo "CLAIM_WORKLIFE = 3600" >> $LCONFIG
 	echo "JOB_RENICE_INCREMENT=0" >> $LCONFIG
 	echo "GSI_DELEGATION_KEYBITS = 1024" >> $LCONFIG
	echo 'CCB_ADDRESS = $(COLLECTOR_HOST)' >> $LCONFIG
	echo "HIGHPORT = 30000" >> $LCONFIG 
	echo "LOWPORT = 20000" >> $LCONFIG
	echo "USE_SHARED_PORT = TRUE" >> $LCONFIG
	echo 'DAEMON_LIST =  $(DAEMON_LIST) SHARED_PORT' >> $LCONFIG
	echo 'ALLOW_WRITE = condor_pool@*' >> $LCONFIG
	echo "SEC_DEFAULT_AUTHENTICATION = REQUIRED" >> $LCONFIG
	echo "SEC_DEFAULT_AUTHENTICATION_METHODS = PASSWORD, FS" >> $LCONFIG
	
	echo "SEC_DEFAULT_ENCRYPTION = REQUIRED" >> $LCONFIG
	echo "SEC_DEFAULT_INTEGRITY = REQUIRED" >> $LCONFIG
	echo "SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION  = True" >> $LCONFIG
	echo 'ALLOW_WRITE = $(ALLOW_WRITE), submit-side@matchsession/*' >> $LCONFIG
	echo 'ALLOW_ADMINISTRATOR = condor_pool@*/*' >> $LCONFIG		
					
	if [ "$AUTH" == "password" ]; then
	   echo "password auth requested. creating file..."
	   condor_store_cred -f $CONDOR_DIR/condor_password -p $POOLPASS > /dev/null 2>&1
	   echo "SEC_PASSWORD_FILE = $CONDOR_DIR/condor_password" >> $LCONFIG		
	fi

	if [ "$AUTH" == "gsi" ]; then
		echo "gsi auth requested..."
	fi	

	
}

f_exit(){
        if [ "$1" == "" ]; then
                RETVAL=0
        else
                RETVAL=$1
        fi
        echo "exiting with RC = $RETVAL"
        exit $RETVAL
}

run_condor_master() {
	echo "running condor master..."
	condor_master -pidfile $CONDOR_DIR/master.pid &
	sleep 2
	MASTERPID=`cat $CONDOR_DIR/master.pid`
	echo "master PID is $MASTERPID"
	echo "waiting for master to exit..."
	wait $MASTERPID
	echo "master has exitted. done."
	f_exit 0
}


#
# Main script
#

get_args "$@"

validate_args

print_header

setup_dir
rc=$?
if [ $rc -ne 0 ]; then
        f_exit $rc
fi

handle_tarball
rc=$?
if [ $rc -ne 0 ]; then
        f_exit $rc
fi

install_condor
rc=$?
if [ $rc -ne 0 ]; then
        f_exit $rc
fi

configure_condor
rc=$?
if [ $rc -ne 0 ]; then
        f_exit $rc
fi

configure_auth
rc=$?
if [ $rc -ne 0 ]; then
        f_exit $rc
fi



